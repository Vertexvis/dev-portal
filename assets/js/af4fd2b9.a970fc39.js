"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[8667],{1280:function(e,t,n){n.d(t,{jc:function(){return g},en:function(){return y},AE:function(){return x}});var a=n(7462),i=n(7294),r="browserWindow_CU2T",l="browserWindowHeader_9KMa",o="buttons_HaVU",s="browserWindowAddressBar_ep3W",m="dot_AgBE",c="browserWindowMenuIcon_mrOC",d="bar_CAZr",u="browserWindowBody_jHfO";var p=function(e){var t=e.children,n=e.minHeight,a=e.url;return i.createElement("div",{className:r,style:{minHeight:n}},i.createElement("div",{className:l},i.createElement("div",{className:o},i.createElement("span",{className:m,style:{background:"#f25f58"}}),i.createElement("span",{className:m,style:{background:"#fbbe3c"}}),i.createElement("span",{className:m,style:{background:"#58cb42"}})),i.createElement("div",{className:s},a),i.createElement("div",{className:c},i.createElement("div",null,i.createElement("span",{className:d}),i.createElement("span",{className:d}),i.createElement("span",{className:d})))),i.createElement("div",{className:u},t))},h=n(8215),w=n(6396),v=n(3746),k=n(3618),f={html:"HTML",js:"JavaScript",xamarin:"Xamarin"},N=["viewer","js","html","xamarin"];function g(e){var t=e.selected,n=void 0===t?"js":t,a=e.groupId,r=e.children,l=i.Children.toArray(r).map((function(e){if(e.props.originalType===y)return{label:f[e.props.lang]||e.props.lang,value:e.props.lang,children:i.createElement(y,{lang:e.props.lang,code:e.props.code,children:e.props.children})};if(e.props.originalType===x)return{label:"Viewer",value:"viewer",children:i.createElement(x,{src:e.props.src})};throw new Error("Unhandled element type "+e.props.mdxType)})),o=l.sort((function(e,t){return N.indexOf(e.value)-N.indexOf(t.value)})),s=o.map((function(e){return{label:e.label,value:e.value}})),m=o.map((function(e){return i.createElement(h.Z,{key:e.value,value:e.value},e.children)})),c=0===l.length&&l.some((function(e){return e.value===n}))?n:l[0].value;return i.createElement(w.Z,{defaultValue:c,groupId:a,values:s},m)}function y(e){var t=e.lang,n=e.code,r=e.children;return n?i.createElement(v.ZP,(0,a.Z)({},v.lG,{theme:k.Z,code:n.default,language:t}),(function(e){var t=e.className,n=e.style,a=e.tokens,r=e.getLineProps,l=e.getTokenProps;return i.createElement("pre",{className:t,style:n},a.map((function(e,t){return i.createElement("div",r({line:e,key:t}),e.map((function(e,t){return i.createElement("span",l({token:e,key:t}))})))})))})):i.createElement(i.Fragment,null,r)}function x(e){var t=e.src,n=(0,i.useRef)(null);return(0,i.useEffect)((function(){function e(e){e.preventDefault()}return null!=n.current&&n.current.contentWindow.addEventListener("wheel",e,{passive:!1}),function(){null!=n.current&&n.current.contentWindow.removeEventListener("wheel",e)}})),i.createElement(p,{url:"developer.vertexvis.com"},i.createElement("iframe",{ref:n,width:"100%",height:"400",src:t,frameBorder:"0",style:{display:"block"}}))}},2831:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return v},default:function(){return g},frontMatter:function(){return w},metadata:function(){return k},toc:function(){return f}});var a={};n.r(a),n.d(a,{default:function(){return u}});var i={};n.r(i),n.d(i,{default:function(){return p}});var r=n(7462),l=n(3366),o=n(7294),s=n(3905),m=n(1280),c=n(9960);function d(){return o.createElement(o.Fragment,null,"The following instructions assume:",o.createElement("ul",null,o.createElement("li",null,"You have built your first application following"," ",o.createElement(c.Z,{href:"https://console.vertexvis.com/getting-started"},"our guide"),", or have built a similar application."),o.createElement("li",null,"You are familiar with the raycaster tool and hit results for"," ",o.createElement(c.Z,{href:"https://developer.vertexvis.com/docs/guides/render-your-first-scene#interact-with-the-scene"},"interacting with the scene"),".")))}var u='<!DOCTYPE html>\n<html lang="">\n\n<head>\n  <meta charset="utf-8" />\n  <title>Getting Started with Vertex</title>\n  <meta name="viewport" content="width=device-width, initial-scale=1" />\n  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/viewer/viewer.css" />\n  <style>\n    html,\n    body,\n    .viewer {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n    }\n  </style>\n</head>\n\n<body>\n  <script type="module" src="https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/viewer/viewer.esm.js"><\/script>\n  <script nomodule src="https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/viewer.js"><\/script>\n\n  <vertex-viewer class="viewer" client-id="08F675C4AACE8C0214362DB5EFD4FACAFA556D463ECA00877CB225157EF58BFA">\n    <vertex-viewer-toolbar placement="top-right">\n      <vertex-viewer-view-cube></vertex-viewer-view-cube>\n    </vertex-viewer-toolbar>\n\n    <vertex-viewer-toolbar placement="bottom-left">\n      <input id="color-input" type="color" />\n    </vertex-viewer-toolbar>\n  </vertex-viewer>\n\n  <script type="module">\n    import { defineCustomElements } from \'https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/esm/loader.js\';\n    import { ColorMaterial } from \'https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/esm/index.js\';\n\n    async function main() {\n      await defineCustomElements(window);\n\n      const viewer = document.querySelector(\'vertex-viewer\');\n      const input = document.querySelector(\'#color-input\');\n      await viewer.load(\n        `urn:vertex:stream-key:AH7v0jg5aN5_thkhU-XTzB_29aqW89EjyOH8`\n      );\n\n      viewer.addEventListener(\'tap\', async (event) => {\n        const scene = await viewer.scene();\n        const raycaster = scene.raycaster();\n\n        const result = await raycaster.hitItems(event.detail.position);\n        const [hit] = result.hits;\n\n        if (hit != null) {\n          const itemId = hit.itemId?.hex;\n          await scene\n            .items((op) => [\n              op\n                .where((q) => q.withItemId(itemId))\n                .materialOverride(ColorMaterial.fromHex(input.value)),\n            ])\n            .execute();\n        } else {\n          await scene\n            .items((op) => [\n              op.where((q) => q.all()).clearMaterialOverrides(),\n            ])\n            .execute();\n        }\n      });\n    }\n\n    main();\n  <\/script>\n</body>\n\n</html>',p='<!DOCTYPE html>\n<html lang="">\n\n<head>\n  <meta charset="utf-8" />\n  <title>Getting Started with Vertex</title>\n  <meta name="viewport" content="width=device-width, initial-scale=1" />\n  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/viewer/viewer.css" />\n  <style>\n    html,\n    body,\n    .viewer {\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n    }\n  </style>\n</head>\n\n<body>\n  <script type="module" src="https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/viewer/viewer.esm.js"><\/script>\n  <script nomodule src="https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/viewer.js"><\/script>\n\n  <vertex-viewer class="viewer" client-id="08F675C4AACE8C0214362DB5EFD4FACAFA556D463ECA00877CB225157EF58BFA">\n    <vertex-viewer-toolbar placement="top-right">\n      <vertex-viewer-view-cube></vertex-viewer-view-cube>\n    </vertex-viewer-toolbar>\n\n    <vertex-viewer-toolbar placement="bottom-left">\n      <input id="opacity-input" type="range" value="0.2" min="0.1" max="1" step="0.1" />\n    </vertex-viewer-toolbar>\n  </vertex-viewer>\n\n  <script type="module">\n    import { defineCustomElements } from \'https://cdn.jsdelivr.net/npm/@vertexvis/viewer@0.19.x/dist/esm/loader.js\';\n\n    async function main() {\n      await defineCustomElements(window);\n\n      const viewer = document.querySelector(\'vertex-viewer\');\n      const input = document.querySelector(\'#opacity-input\');\n      await viewer.load(\n        `urn:vertex:stream-key:AH7v0jg5aN5_thkhU-XTzB_29aqW89EjyOH8`\n      );\n\n      viewer.addEventListener(\'tap\', async (event) => {\n        const scene = await viewer.scene();\n        const raycaster = scene.raycaster();\n\n        const result = await raycaster.hitItems(event.detail.position);\n        const [hit] = result.hits;\n\n        if (hit != null) {\n          const itemId = hit.itemId?.hex;\n          await scene\n            .items((op) => [\n              op\n                .where((q) => q.withItemId(itemId))\n                .setPhantom(true),\n            ])\n            .execute();\n        } else {\n          await scene\n            .items((op) => [\n              op.where((q) => q.all()).clearPhantom(),\n            ])\n            .execute();\n        }\n      });\n\n      input.addEventListener(\'change\', (event) => {\n        viewer.phantom = { opacity: event.target.value };\n      });\n    }\n\n    main();\n  <\/script>\n</body>\n\n</html>',h=["components"],w={id:"customize-your-scene",title:"Customize your scene",description:"Use the Vertex platform's Viewer component to alter the view of your scene.",toc_min_heading_level:2,toc_max_heading_level:4},v=void 0,k={unversionedId:"guides/customize-your-scene",id:"guides/customize-your-scene",title:"Customize your scene",description:"Use the Vertex platform's Viewer component to alter the view of your scene.",source:"@site/docs/guides/customize-your-scene.mdx",sourceDirName:"guides",slug:"/guides/customize-your-scene",permalink:"/docs/guides/customize-your-scene",editUrl:"https://github.com/Vertexvis/dev-portal/tree/main/docs/guides/customize-your-scene.mdx",tags:[],version:"current",frontMatter:{id:"customize-your-scene",title:"Customize your scene",description:"Use the Vertex platform's Viewer component to alter the view of your scene.",toc_min_heading_level:2,toc_max_heading_level:4},sidebar:"guidesSidebar",previous:{title:"Build your first application",permalink:"/docs/guides/build-your-first-app"},next:{title:"Postman quick start",permalink:"/docs/guides/postman-quick-start"}},f=[{value:"Performing a scene operation",id:"performing-a-scene-operation",children:[],level:2},{value:"Available queries",id:"available-queries",children:[{value:"<code>all</code>",id:"all",children:[],level:4},{value:"<code>not</code>",id:"not",children:[],level:4},{value:"<code>withItemId</code>",id:"withitemid",children:[],level:4},{value:"<code>withSuppliedId</code>",id:"withsuppliedid",children:[],level:4},{value:"<code>withItemIds</code>",id:"withitemids",children:[],level:4},{value:"<code>withSuppliedIds</code>",id:"withsuppliedids",children:[],level:4},{value:"<code>withSelected</code>",id:"withselected",children:[],level:4},{value:"<code>withMetadata</code>",id:"withmetadata",children:[],level:4},{value:"<code>withPoint</code>",id:"withpoint",children:[],level:4},{value:"<code>withSceneTreeRange</code>",id:"withscenetreerange",children:[],level:4},{value:"<code>withVolumeIntersection</code>",id:"withvolumeintersection",children:[],level:4}],level:2},{value:"Available operations",id:"available-operations",children:[{value:"<code>show</code>",id:"show",children:[],level:4},{value:"<code>hide</code>",id:"hide",children:[],level:4},{value:"<code>select</code>",id:"select",children:[],level:4},{value:"<code>deselect</code>",id:"deselect",children:[],level:4},{value:"<code>materialOverride</code>",id:"materialoverride",children:[],level:4},{value:"<code>clearMaterialOverrides</code>",id:"clearmaterialoverrides",children:[],level:4},{value:"<code>transform</code>",id:"transform",children:[],level:4},{value:"<code>clearTransforms</code>",id:"cleartransforms",children:[],level:4},{value:"<code>setPhantom</code>",id:"setphantom",children:[],level:4},{value:"<code>clearPhantom</code>",id:"clearphantom",children:[],level:4},{value:"<code>setEndItem</code>",id:"setenditem",children:[],level:4},{value:"<code>clearEndItem</code>",id:"clearenditem",children:[],level:4}],level:2},{value:"Examples",id:"examples",children:[{value:"<strong>Changing an item&#39;s material</strong>",id:"changing-an-items-material",children:[],level:4},{value:"<strong>Changing an item&#39;s phantom state</strong>",id:"changing-an-items-phantom-state",children:[],level:4}],level:2}],N={toc:f};function g(e){var t=e.components,n=(0,l.Z)(e,h);return(0,s.kt)("wrapper",(0,r.Z)({},N,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Now that you have ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/render-your-first-scene"},"rendered your first scene"),", ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/import-data"},"imported your data"),", and ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/build-your-first-app"},"built your first application"),", let's  explore additional ways you can modify the items in your scene."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)(d,{mdxType:"ExampleAppNote"}))),(0,s.kt)("h2",{id:"performing-a-scene-operation"},"Performing a scene operation"),(0,s.kt)("p",null,"Once a view of a scene has been established, we can perform scene operations to alter the visual representation of items in the scene. This allows for dynamic updates to the items in a scene based on\na user's interaction with the 3D. These alterations to the view are temporary by default, and are not persisted to the base scene. We'll cover how to persist the alterations to the view in a later guide."),(0,s.kt)("p",null,"The Vertex Viewer UI component provides a set of APIs that your application can leverage to describe operations to perform in response to various events, and the component will automatically handle the generation of a new image\nto reflect the result of the operations."),(0,s.kt)("p",null,"When you ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/render-your-first-scene"},"rendered your first scene"),", we explored the ability to perform scene operations through adding click-based selection. Let's take a closer look at the operations performed in that example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"if (hit != null) {\n  const itemId = hit.itemId?.hex;\n  await scene\n    .items((op) => [\n      ...(selectedItemId\n        ? [op.where((q) => q.withItemId(selectedItemId)).deselect()]\n        : []),\n      op.where((q) => q.withItemId(itemId)).select(),\n    ])\n    .execute();\n  selectedItemId = itemId;\n}\n")),(0,s.kt)("p",null,"Here's what this code does:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"If we have a hit result from an earlier ",(0,s.kt)("inlineCode",{parentName:"li"},"raycaster.hitItems")," request, we initiate an operation on the items within the scene using the ",(0,s.kt)("inlineCode",{parentName:"li"},"scene.items")," method.\nThis method expects a function that takes an operation builder as a parameter, and returns a set of operations to perform. In this scenario, we select the item\nmatching the ",(0,s.kt)("inlineCode",{parentName:"li"},"itemId")," of our hit result, while deselecting the previously selected item (if there is one).")),(0,s.kt)("p",null,"Breaking it down further, we can inspect an individual operation being performed:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"op.where((q) => q.withItemId(itemId)).select(),\n")),(0,s.kt)("p",null,"Here's what this code does:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"We leverage the ",(0,s.kt)("inlineCode",{parentName:"li"},"where")," method provided on the operation builder that was passed to our function, which similarly expects a function, this time taking a query\nbuilder as a parameter. This query builder provides us with a method of describing what we want to change. In this case, we use a simple query, specifying\nthe exact ID of an item to select."),(0,s.kt)("li",{parentName:"ul"},"After specifying what we want to change, we specify how we want to change it. In this case, we use the ",(0,s.kt)("inlineCode",{parentName:"li"},"select")," operation to indicate\nthat we want this item to be marked as selected.")),(0,s.kt)("p",null,"Once we have specified the operation we want to perform, we can call ",(0,s.kt)("inlineCode",{parentName:"p"},"execute"),", which will tell the Viewer component to execute the operation and return a new\nimage reflecting the requested updates."),(0,s.kt)("h2",{id:"available-queries"},"Available queries"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"op.where")," method supports a number of queries to specify what items within a scene that you want to operate on:"),(0,s.kt)("h4",{id:"all"},(0,s.kt)("inlineCode",{parentName:"h4"},"all")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on all items in the scene.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Deselect all items in the scene\n  await scene.items((op) => [op.where((q) => q.all()).deselect()]).execute();\n}\n"))),(0,s.kt)("h4",{id:"not"},(0,s.kt)("inlineCode",{parentName:"h4"},"not")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on all items that do not match any following queries. For example, a ",(0,s.kt)("inlineCode",{parentName:"li"},"q.not().withSelected()")," will perform\nan operation on all items in the scene that are not selected.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide all items that are not selected\n  await scene.items((op) => [op.where((q) => q.not().withSelected()).hide()]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withitemid"},(0,s.kt)("inlineCode",{parentName:"h4"},"withItemId")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"id: string")," - the ID of the item to operate on"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item matching the provided ID.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withsuppliedid"},(0,s.kt)("inlineCode",{parentName:"h4"},"withSuppliedId")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"suppliedId: string")," - the supplied ID of the item to operate on"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item matching the provided custom supplied ID.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide the item with the `item-supplied-id` supplied ID\n  await scene.items((op) => [\n    op.where((q) => q.withSuppliedId('item-supplied-id')).hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withitemids"},(0,s.kt)("inlineCode",{parentName:"h4"},"withItemIds")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ids: string[]")," - a set of item IDs for the items to operate on"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item matching any one of the provided IDs.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide the item with the `item-uuid-1` ID and the `item-uuid-2` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemIds(['item-uuid-1', 'item-uuid-2'])).hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withsuppliedids"},(0,s.kt)("inlineCode",{parentName:"h4"},"withSuppliedIds")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"suppliedIds: string[]")," - a set of supplied item IDs for the items to operate on"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item matching any one of the provided custom supplied IDs.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide the item with the `item-supplied-id-1` supplied ID\n  // and the `item-supplied-id-2` supplied ID\n  await scene.items((op) => [\n    op\n      .where((q) => q.withItemIds(['item-supplied-id-1', 'item-supplied-id-2']))\n      .hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withselected"},(0,s.kt)("inlineCode",{parentName:"h4"},"withSelected")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item that has been selected.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide all items that are selected\n  await scene.items((op) => [op.where((q) => q.withSelected()).hide()]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withmetadata"},(0,s.kt)("inlineCode",{parentName:"h4"},"withMetadata")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"filter: string")," - the value to match against for the provided ",(0,s.kt)("inlineCode",{parentName:"li"},"keys")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"keys: string[]")," - the keys to include when matching"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"exactMatch: boolean")," - whether the metadata value should exactly match the ",(0,s.kt)("inlineCode",{parentName:"li"},"filter")))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item that has a metadata value matching the ",(0,s.kt)("inlineCode",{parentName:"li"},"filter")," provided for any of the ",(0,s.kt)("inlineCode",{parentName:"li"},"keys")," specified.\nCan optionally be set to perform an ",(0,s.kt)("inlineCode",{parentName:"li"},"exactMatch"),", which will require that the ",(0,s.kt)("inlineCode",{parentName:"li"},"filter")," matches the value exactly.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide all items where the `PART_NAME_KEY` includes a value of `PartName`\n  await scene.items((op) => [\n    op.where((q) => q.withMetadata('PartName', ['PART_NAME_KEY'])).hide(),\n  ]).execute();\n\n  // Hide all items where the `PART_NAME_KEY` has exactly a value of `PartName`\n  await scene.items((op) => [\n    op.where((q) => q.withMetadata('PartName', ['PART_NAME_KEY'], true)).hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withpoint"},(0,s.kt)("inlineCode",{parentName:"h4"},"withPoint")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"point: Point.Point")," - the point on the image where an item to be operated on is located"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on any item present at the provided ",(0,s.kt)("inlineCode",{parentName:"li"},"point")," in the image. This query operates on the item found at that\n",(0,s.kt)("inlineCode",{parentName:"li"},"point")," similar to using ",(0,s.kt)("inlineCode",{parentName:"li"},"withItemId")," in combination with ",(0,s.kt)("inlineCode",{parentName:"li"},"raycaster.hitItems"),", which can be useful if the additional metadata from the ",(0,s.kt)("inlineCode",{parentName:"li"},"raycaster.hitItems"),"\nmethod is not needed to eliminate a network request.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Point } from '@vertexvis/geometry';\n\nasync function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Select the item present at the [100, 100] coordinate of the image\n  await scene.items((op) => [\n    op.where((q) => q.withPoint(Point.create(100, 100))).select(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withscenetreerange"},(0,s.kt)("inlineCode",{parentName:"h4"},"withSceneTreeRange")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"range: SceneTreeRange")," - the range within the tree to perform the operation on"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on a range within the ",(0,s.kt)("inlineCode",{parentName:"li"},"<vertex-scene-tree>")," component.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide all items from the 2nd row to the 5th row of the scene-tree\n  await scene.items((op) => [\n    op\n      .where((q) =>\n        q.withSceneTreeRange({\n          start: 2,\n          end: 5,\n        })\n      )\n      .hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"withvolumeintersection"},(0,s.kt)("inlineCode",{parentName:"h4"},"withVolumeIntersection")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"rectangle: Rectangle.Rectangle")," - the 2D bounds within the image"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"exclusive?: boolean")," - whether this is exclusive (only items fully contained) or inclusive (items fully contained + intersecting)"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the operation should be performed on items within the specified ",(0,s.kt)("inlineCode",{parentName:"li"},"rectangle")," boundary within the Viewer. The ",(0,s.kt)("inlineCode",{parentName:"li"},"exclusive")," flag here determines\nwhether items that intersect with the ",(0,s.kt)("inlineCode",{parentName:"li"},"rectangle"),", but are not contained should be included in the result.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Rectangle } from '@vertexvis/geometry';\n\nasync function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  const viewerBounds = viewer.getBoundingClientRect();\n  const x = viewerBounds.x + 100;\n  const y = viewerBounds.y + 100;\n\n  // Create a 100x100 region at a point offset 100 pixels from the\n  // top and left of the `<vertex-viewer>` element.\n  const region = Rectangle.create(x, y, 100, 100);\n\n  // Select all items within the specified `region` of the image\n  // excluding any elements that are not fully contained by the region\n  await scene.items((op) => [\n    op\n      .where((q) =>\n        q.withVolumeIntersection(\n          region,\n          true\n        )\n      )\n      .hide(),\n  ]).execute();\n\n  // Select all items within the specified `region` of the image\n  // including any elements that intersect with the region\n  await scene.items((op) => [\n    op\n      .where((q) =>\n        q.withVolumeIntersection(\n          region,\n          false\n        )\n      )\n      .hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h2",{id:"available-operations"},"Available operations"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"scene.items")," method supports a number of operations to specify how the items should be altered:"),(0,s.kt)("h4",{id:"show"},(0,s.kt)("inlineCode",{parentName:"h4"},"show")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should be shown.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Show the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).show(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"hide"},(0,s.kt)("inlineCode",{parentName:"h4"},"hide")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should be hidden.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Hide the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"select"},(0,s.kt)("inlineCode",{parentName:"h4"},"select")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should be selected.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Select the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).select(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"deselect"},(0,s.kt)("inlineCode",{parentName:"h4"},"deselect")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should be deselected.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Deselect the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).hide(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"materialoverride"},(0,s.kt)("inlineCode",{parentName:"h4"},"materialOverride")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"material: ColorMaterial | string")," - a ",(0,s.kt)("inlineCode",{parentName:"li"},"ColorMaterial")," or ",(0,s.kt)("inlineCode",{parentName:"li"},"string")," representing the material color"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their default material overridden to match the specified material.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { ColorMaterial } from '@vertexvis/viewer';\n\nasync function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Override the material for the item with the `item-uuid` ID to\n  // be red with an opacity of 0.5.\n  await scene.items((op) => [\n    op\n      .where((q) => q.withItemId('item-uuid'))\n      .materialOverride(ColorMaterial.create(255, 0, 0, 0.5)),\n  ]).execute();\n\n  // Override the material for the item with the `item-uuid` ID to\n  // be red with an opacity of 1.\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).materialOverride('#ff0000'),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"clearmaterialoverrides"},(0,s.kt)("inlineCode",{parentName:"h4"},"clearMaterialOverrides")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have any overridden material removed.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { ColorMaterial } from '@vertexvis/viewer';\n\nasync function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Clear the overridden material on the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).clearMaterialOverrides(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"transform"},(0,s.kt)("inlineCode",{parentName:"h4"},"transform")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"matrix: Matrix4x4")," - the transformation matrix to use"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their transformation matrix overridden to match the specified transformation matrix.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"import { Matrix4, Vector3 } from '@vertexvis/geometry';\n\nasync function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Override the transformation matrix for the item with the `item-uuid` ID to\n  // move the element along the x-axis\n  await scene.items((op) => [\n    op\n      .where((q) => q.withItemId('item-uuid'))\n      .transform(Matrix4.makeTranslation(Vector3.create(100, 0, 0))),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"cleartransforms"},(0,s.kt)("inlineCode",{parentName:"h4"},"clearTransforms")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cascade?: boolean")," - whether this operation should cascade to child items"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their overridden transformation matrix removed. The ",(0,s.kt)("inlineCode",{parentName:"li"},"cascade")," flag determines whether\nchildren of the items matching the query should also have their overridden transformation matrix removed, and defaults to ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Clear the overridden the transformation matrix for the item with the `item-uuid` ID\n  // and do not cascade to preserve transformations on children\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).clearTransforms(false),\n  ]).execute();\n\n  // Clear the overridden the transformation matrix for the item with the `item-uuid` ID\n  // and cascade to clear overridden transformations on children\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).clearTransforms(true),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"setphantom"},(0,s.kt)("inlineCode",{parentName:"h4"},"setPhantom")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"phantomState?: boolean")," - the phantom state to apply to the items"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their phantom state overridden to match the specified ",(0,s.kt)("inlineCode",{parentName:"li"},"phantomState")," flag. If the\n",(0,s.kt)("inlineCode",{parentName:"li"},"phantomState")," flag is not provided, it will default to ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Mark the item with the `item-uuid` ID as phantom\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).setPhantom(true),\n  ]).execute();\n\n  // Unmark the item with the `item-uuid` ID as phantom\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).setPhantom(false),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"clearphantom"},(0,s.kt)("inlineCode",{parentName:"h4"},"clearPhantom")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their overridden phantom state removed.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Clear the overridden phantom state of the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).clearPhantom(),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"setenditem"},(0,s.kt)("inlineCode",{parentName:"h4"},"setEndItem")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"endItemState?: boolean")," - the end item state to apply to the items"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their end item state overridden to match the specified ",(0,s.kt)("inlineCode",{parentName:"li"},"endItemState")," flag. If the\n",(0,s.kt)("inlineCode",{parentName:"li"},"endItemState")," flag is not provided, it will default to ",(0,s.kt)("inlineCode",{parentName:"li"},"true"),".",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},"Note:")," end item states do not propagate to children similar to other states. I.e. calling ",(0,s.kt)("inlineCode",{parentName:"li"},"setEndItem(false)")," on an item will cause it\nto be unmarked as an end item, but any children where ",(0,s.kt)("inlineCode",{parentName:"li"},"setEndItem(true)")," was called previously will remain as end items.")))),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Mark the item with the `item-uuid` ID as an end item\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).setEndItem(true),\n  ]).execute();\n\n  // Unmark the item with the `item-uuid` ID as an end item\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).setEndItem(false),\n  ]).execute();\n}\n"))),(0,s.kt)("h4",{id:"clearenditem"},(0,s.kt)("inlineCode",{parentName:"h4"},"clearEndItem")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Parameters:",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"None"))),(0,s.kt)("li",{parentName:"ul"},"Specifies that the items matching the query should have their overridden end item state removed.")),(0,s.kt)("details",{className:"code"},(0,s.kt)("summary",null,"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-js"},"async function performOperation() {\n  const viewer = document.querySelector('vertex-viewer');\n  const scene = await viewer.scene();\n\n  // Clear the overridden end item state of the item with the `item-uuid` ID\n  await scene.items((op) => [\n    op.where((q) => q.withItemId('item-uuid')).clearEndItem(),\n  ]).execute();\n}\n"))),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("h4",{id:"changing-an-items-material"},(0,s.kt)("strong",{parentName:"h4"},"Changing an item's material")),(0,s.kt)("p",null,"The following example shows how to change an item's material based on ",(0,s.kt)("inlineCode",{parentName:"p"},"tap")," events. Clicking on an item will change its color to match the input\nin the bottom left, and clicking in white space will clear all overrides."),(0,s.kt)(m.jc,{mdxType:"CodeExamples"},(0,s.kt)(m.en,{lang:"html",code:a,mdxType:"Example"}),(0,s.kt)(m.AE,{src:"/examples/change-material/index.html",mdxType:"Viewer"})),(0,s.kt)("h4",{id:"changing-an-items-phantom-state"},(0,s.kt)("strong",{parentName:"h4"},"Changing an item's phantom state")),(0,s.kt)("p",null,"The following example shows how to change an item's phantom state based on ",(0,s.kt)("inlineCode",{parentName:"p"},"tap")," events. Clicking an item will mark it as phantom, and clicking in\nwhite space will remove the phantom state for all items."),(0,s.kt)("p",null,"The slider in the bottom left can be used to adjust the opacity that the phantom items are displayed with."),(0,s.kt)(m.jc,{mdxType:"CodeExamples"},(0,s.kt)(m.en,{lang:"html",code:i,mdxType:"Example"}),(0,s.kt)(m.AE,{src:"/examples/change-phantom/index.html",mdxType:"Viewer"})))}g.isMDXComponent=!0}}]);