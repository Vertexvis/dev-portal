"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[3769],{5722:function(e,t,n){n.d(t,{G:function(){return r}});var a=n(7273),i=n(7294),s='Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"';function r(e){var t=e.chart;return(0,i.useEffect)((function(){a.Z.contentLoaded()}),[]),i.createElement("div",{className:"mermaid"},t)}a.Z.initialize({fontFamily:s,gantt:{fontFamily:s},sequence:{actorFontFamily:s,messageFontFamily:s,messageFontWeight:100,noteFontFamily:s,showSequenceNumbers:!0},startOnLoad:!0})},2035:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return d},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return m},default:function(){return g}});var a=n(7462),i=n(3366),s=(n(7294),n(3905)),r=n(5722),o=n(6396),c=n(8215),l=["components"],d={id:"render-static-scenes",title:"Render static scenes",description:"Create and render 3D scenes using the Vertex platform APIs and SDKs."},p=void 0,u={unversionedId:"guides/render-static-scenes",id:"guides/render-static-scenes",title:"Render static scenes",description:"Create and render 3D scenes using the Vertex platform APIs and SDKs.",source:"@site/docs/guides/render-static-scenes.mdx",sourceDirName:"guides",slug:"/guides/render-static-scenes",permalink:"/docs/guides/render-static-scenes",editUrl:"https://github.com/Vertexvis/dev-portal/tree/main/docs/guides/render-static-scenes.mdx",tags:[],version:"current",frontMatter:{id:"render-static-scenes",title:"Render static scenes",description:"Create and render 3D scenes using the Vertex platform APIs and SDKs."},sidebar:"guidesSidebar",previous:{title:"Import metadata",permalink:"/docs/guides/import-metadata"},next:{title:"Webhook Events",permalink:"/docs/guides/webhook-events"}},m=[{value:"Creating scenes and scene items",id:"creating-scenes-and-scene-items",children:[],level:2},{value:"Viewing scenes",id:"viewing-scenes",children:[{value:"In the API",id:"in-the-api",children:[],level:3},{value:"In the Viewer component",id:"in-the-viewer-component",children:[],level:3}],level:2}],h={toc:m};function g(e){var t=e.components,n=(0,i.Z)(e,l);return(0,s.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Create scenes from collections of parts through the scene APIs. Then, use these APIs and the Viewer component to view rendered scenes and change scene item attributes such as visibility and color material. This API introduces the following concepts:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Scene: A blueprint for what your users see. Scenes are collections of scene items."),(0,s.kt)("li",{parentName:"ul"},"Scene item: The viewable objects in a scene. Scene items reference geometry from parts in the Parts Library. Scene items contain transforms describing their orientation within the scene, optional color material overrides, and visibility flags."),(0,s.kt)("li",{parentName:"ul"},"Scene view: A viewing session for an individual user. Scene views are created from scenes, inherit the scene's content, and reflect scene changes. Users may modify their scene view without affecting the underlying scene.")),(0,s.kt)("p",null,"To create and view scenes, do the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Create a scene."),(0,s.kt)("li",{parentName:"ul"},"Within that scene, create scene items referencing parts in the Parts Library."),(0,s.kt)("li",{parentName:"ul"},"Commit the scene and optionally update the camera."),(0,s.kt)("li",{parentName:"ul"},"Either use the API to fetch a scene image or use the Viewer component to create and view a scene view.")),(0,s.kt)(r.G,{chart:"\n  sequenceDiagram\n  participant C as Client App\n  participant V as Viewer\n  participant API as Vertex API\n      Note over C,API: Create scene and scene items\n      C->>+API: Create scene\n      API--\x3e>-C: Scene ID\n      C->>+API: Initiate scene items with scene and part-revision IDs\n      API--\x3e>-C: Queued scene item ID\n      loop Check status\n        C->>+API: Check scene item status with queued scene item ID\n        API--\x3e>-C: If running, status | If complete, redirect to scene item\n      end\n      C->>+API: Update scene with state=commit\n      API--\x3e>-C: Scene ID\n      Note over C,API: View scene\n      C->>+API: Fetch scene image\n      API--\x3e>-C: Image\n      C->>+V: WebSocket connection\n      V--\x3e>-C: Images\n",mdxType:"Mermaid"}),(0,s.kt)("h2",{id:"creating-scenes-and-scene-items"},"Creating scenes and scene items"),(0,s.kt)("p",null,"To create scenes, ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," to the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.vertexvis.com/#fe3357f4-c86d-49d2-832a-e76f1f386cc3"},"createScene")," API."),(0,s.kt)(o.Z,{defaultValue:"req",values:[{label:"Request",value:"req"},{label:"Response",value:"res"}],mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"req",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \\\n  --url "https://platform.vertexvis.com/scenes" \\\n  --header "Authorization: Bearer [YOUR_ACCESS_TOKEN]" \\\n  --header "Content-Type: application/vnd.api+json" \\\n  --data \'{\n  "data": {\n    "attributes": {},\n    "type": "scene"\n  }\n}\'\n'))),(0,s.kt)(c.Z,{value:"res",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "attributes": {\n      "camera": {\n        "lookAt": { "x": 0.0, "y": 0.0, "z": 0.0 },\n        "position": { "x": 0.0, "y": 0.0, "z": -100.0 },\n        "up": { "x": 0.0, "y": 1.0, "z": 0.0 }\n      },\n      // highlight-next-line\n      "state": "draft"\n    },\n    // highlight-next-line\n    "id": "[YOUR_SCENE_ID]",\n    "type": "scene"\n  }\n}\n')))),(0,s.kt)("p",null,"Now that the scene resource exists, ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," to the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.vertexvis.com/#d597f539-3785-4c83-a645-fdf3a9a90521"},"createSceneItem")," API. This API is asynchronous, returning the status of a queued scene item. See the ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/transformation-matrices"},"Transformation matrices")," reference for an explanation of the ",(0,s.kt)("inlineCode",{parentName:"p"},"transform")," property."),(0,s.kt)(o.Z,{defaultValue:"req",values:[{label:"Request",value:"req"},{label:"Response",value:"res"}],mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"req",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request POST \\\n  // highlight-next-line\n  --url "https://platform.vertexvis.com/scenes/[YOUR_SCENE_ID]/scene-items" \\\n  --header "Authorization: Bearer [YOUR_ACCESS_TOKEN]" \\\n  --header "Content-Type: application/vnd.api+json" \\\n  --data \'{\n  "data": {\n    "attributes": {\n      "suppliedId": "[YOUR_SUPPLIED_ID]",\n      // highlight-start\n      "transform": {\n        "r0": { "x": 1, "y": 0, "z": 0, "w": 0 },\n        "r1": { "x": 0, "y": 1, "z": 0, "w": 0 },\n        "r2": { "x": 0, "y": 0, "z": 1, "w": 0 },\n        "r3": { "x": 0, "y": 0, "z": 0, "w": 1 }\n      }\n      // highlight-end\n    },\n    "relationships": {\n      "source": {\n        "data": {\n          // highlight-next-line\n          "id": "[YOUR_PART_REVISION_ID]",\n          "type": "part-revision"\n        }\n      }\n    },\n    "type":"scene-item"\n  }\n}\'\n'))),(0,s.kt)(c.Z,{value:"res",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "attributes": {\n      "status": "running"\n    },\n    // highlight-next-line\n    "id": "[YOUR_QUEUED_SCENE_ITEM_ID]",\n    "type": "queued-scene-item"\n  }\n}\n')))),(0,s.kt)("p",null,"To check the status of queued scene items, ",(0,s.kt)("inlineCode",{parentName:"p"},"GET")," the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.vertexvis.com/#f11ab42d-fda6-432c-b219-f7f59299c2eb"},"getQueuedSceneItem")," API. The response returns one of the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The status if ",(0,s.kt)("inlineCode",{parentName:"li"},"running"),"."),(0,s.kt)("li",{parentName:"ul"},"An ",(0,s.kt)("inlineCode",{parentName:"li"},"error")," (similar to the response above)."),(0,s.kt)("li",{parentName:"ul"},"Upon completion, redirects to the created scene item.")),(0,s.kt)(o.Z,{defaultValue:"req",values:[{label:"Request",value:"req"},{label:"Response",value:"res"}],mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"req",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request GET \\\n  // highlight-next-line\n  --url "https://platform.vertexvis.com/queued-scene-items/[YOUR_QUEUED_SCENE_ITEM_ID]" \\\n  --header "Authorization: Bearer [YOUR_ACCESS_TOKEN]" \\\n  --location\n'))),(0,s.kt)(c.Z,{value:"res",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "attributes": {\n      "suppliedId": "[YOUR_SUPPLIED_ID]",\n      "transform": {\n        "r0": { "x": 1.0, "y": 0.0, "z": 0.0, "w": 0.0 },\n        "r1": { "x": 0.0, "y": 1.0, "z": 0.0, "w": 0.0 },\n        "r2": { "x": 0.0, "y": 0.0, "z": 1.0, "w": 0.0 },\n        "r3": { "x": 0.0, "y": 0.0, "z": 0.0, "w": 1.0 }\n      },\n      "visible": true\n    },\n    // highlight-next-line\n    "id": "[YOUR_SCENE_ITEM_ID]",\n    "relationships": {\n      "source": {\n        "data": {\n          "id": "[YOUR_PART_REVISION_ID]",\n          "type": "part-revision"\n        }\n      }\n    },\n    "type": "scene-item"\n  }\n}\n')))),(0,s.kt)("p",null,"Now that the scene contains scene items, commit it with a ",(0,s.kt)("inlineCode",{parentName:"p"},"PATCH")," to the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.vertexvis.com/#5fa99d4f-85d6-451d-abda-e0459830daf4"},"updateScene")," API."),(0,s.kt)(o.Z,{defaultValue:"req",values:[{label:"Request",value:"req"},{label:"Response",value:"res"}],mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"req",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request PATCH \\\n  // highlight-next-line\n  --url "https://platform.vertexvis.com/scenes/[YOUR_SCENE_ID]" \\\n  --header "Authorization: Bearer [YOUR_ACCESS_TOKEN]" \\\n  --header "Content-Type: application/vnd.api+json" \\\n  --data \'{\n  "data": {\n    "attributes": {\n      // highlight-next-line\n      "state": "commit"\n    },\n    "type": "scenes"\n  }\n}\n'))),(0,s.kt)(c.Z,{value:"res",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "attributes": {\n      "camera": {\n        "lookAt": { "x": 0.0, "y": 0.0, "z": 0.0 },\n        "position": { "x": 0.0, "y": 0.0, "z": -100.0 },\n        "up": { "x": 0.0, "y": 1.0, "z": 0.0 }\n      },\n      // highlight-next-line\n      "state": "commit"\n    },\n    "id": "[YOUR_SCENE_ID]",\n    "type": "scene"\n  }\n}\n')))),(0,s.kt)("h2",{id:"viewing-scenes"},"Viewing scenes"),(0,s.kt)("p",null,"View scenes either by getting a scene image from the API or using the Viewer component."),(0,s.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"If you do not see any items in your scene, make sure the scene is in the ",(0,s.kt)("inlineCode",{parentName:"p"},"commit")," state. If it is, try updating the camera with the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.vertexvis.com/#5fa99d4f-85d6-451d-abda-e0459830daf4"},"updateScene")," API."))),(0,s.kt)("h3",{id:"in-the-api"},"In the API"),(0,s.kt)("p",null,"To get a scene image, ",(0,s.kt)("inlineCode",{parentName:"p"},"GET")," the ",(0,s.kt)("a",{parentName:"p",href:"https://docs.vertexvis.com/#defdc52f-a574-4f65-92f9-d59bba85ca1a"},"renderScene")," API."),(0,s.kt)(o.Z,{defaultValue:"req",values:[{label:"Request",value:"req"},{label:"Response",value:"res"}],mdxType:"Tabs"},(0,s.kt)(c.Z,{value:"req",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},'curl --location --request GET \\\n  // highlight-next-line\n  --url "https://platform.vertexvis.com/scenes/[YOUR_SCENE_ID]/image?width=1000&height=1000" \\\n  --header "Authorization: Bearer [YOUR_ACCESS_TOKEN]" \\\n  // highlight-next-line\n  --output "scene-image.jpg"\n'))),(0,s.kt)(c.Z,{value:"res",mdxType:"TabItem"},(0,s.kt)("p",null,"Open ",(0,s.kt)("inlineCode",{parentName:"p"},"scene-image.jpg")," to view your scene"))),(0,s.kt)("h3",{id:"in-the-viewer-component"},"In the Viewer component"),(0,s.kt)("p",null,"To view the scene, create a stream key ",(0,s.kt)("a",{parentName:"p",href:"/docs/guides/authentication#in-the-viewer-sdk"},"described here")," and pass it to the ",(0,s.kt)("inlineCode",{parentName:"p"},"viewer.load")," method. When loading scenes with the Viewer component, Vertex creates scene views as described above."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"async function main() {\n  const viewer = document.querySelector('#viewer');\n  // highlight-next-line\n  await viewer.load('urn:vertex:stream-key:[YOUR_STREAM_KEY]');\n}\n")))}g.isMDXComponent=!0}}]);