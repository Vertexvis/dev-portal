"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[7182],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||i;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73773:function(e,t,n){n.d(t,{a:function(){return r}});var a=n(67294);function r(){return a.createElement(a.Fragment,null,"Your Vertex client secret is sensitive and must be kept secure at all times. You should ",a.createElement("strong",null,"never")," include it in client-side web applications.")}},30776:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return h}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=n(73773),s=["components"],l={id:"build-your-first-app",title:"Build your first application",description:"Use the Vertex platform's NextJS starter to build your first application."},p=void 0,c={unversionedId:"guides/build-your-first-app",id:"guides/build-your-first-app",isDocsHomePage:!1,title:"Build your first application",description:"Use the Vertex platform's NextJS starter to build your first application.",source:"@site/docs/guides/build-your-first-app.mdx",sourceDirName:"guides",slug:"/guides/build-your-first-app",permalink:"/docs/guides/build-your-first-app",editUrl:"https://github.com/Vertexvis/dev-portal/tree/main/docs/guides/build-your-first-app.mdx",version:"current",frontMatter:{id:"build-your-first-app",title:"Build your first application",description:"Use the Vertex platform's NextJS starter to build your first application."},sidebar:"guidesSidebar",previous:{title:"Import data with CLI",permalink:"/docs/guides/import-data"},next:{title:"Postman quick start",permalink:"/docs/guides/postman-quick-start"}},u=[{value:"Before we start",id:"before-we-start",children:[]},{value:"Creating your application",id:"creating-your-application",children:[]},{value:"Opening your scene",id:"opening-your-scene",children:[]},{value:"Understanding the code",id:"understanding-the-code",children:[]},{value:"Calling the Vertex API",id:"calling-the-vertex-api",children:[]},{value:"Deploying your application",id:"deploying-your-application",children:[]},{value:"Wrapping up",id:"wrapping-up",children:[]}],d={toc:u};function h(e){var t=e.components,l=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"You have now ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/render-your-first-scene"},"rendered your first scene")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/import-data"},"imported your data"),". Next, let's build an application you can deploy publicly!"),(0,i.kt)("p",null,"We'll be using the Vertex Web UI Components, which are standards-based ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Web_Components"},"web components"),". You could create your app using plain JavaScript, but we'll use ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/"},"NextJS"),", a ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/"},"React"),"-based framework with a great developer experience."),(0,i.kt)("p",null,"To get an idea of what you'll be building, check out this ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs-starter.vertexvis.io/"},"example application")," we created."),(0,i.kt)("h2",{id:"before-we-start"},"Before we start"),(0,i.kt)("p",null,"The following diagram gives an overview of how your applications interact with the Vertex Cloud."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Vertex Platform Architecture",src:n(70050).Z,title:"Vertex Platform Architecture"})),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/render-your-first-scene"},"Render your first scene")," guide, we focused on the ",(0,i.kt)("strong",{parentName:"p"},"Your Application")," section, communicating with the Vertex WebSocket using Vertex's test stream key. In the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/import-data"},"Import data")," guide, instead of having you create an API in the ",(0,i.kt)("strong",{parentName:"p"},"Your Cloud")," section, we used the Vertex CLI, which uses the Vertex API Client to communicate with the Vertex REST API using OAuth tokens."),(0,i.kt)("p",null,"In this guide, we'll create a deployable application with an API. With this application, you can securely talk to both the Vertex WebSocket and Vertex REST API. Using these pieces, the full power of the Vertex platform is in your hands."),(0,i.kt)("h2",{id:"creating-your-application"},"Creating your application"),(0,i.kt)("p",null,"Use our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Vertexvis/vertex-nextjs-starter"},"NextJS Starter template")," on GitHub. Press the ",(0,i.kt)("strong",{parentName:"p"},"Use this template")," button to create a new repository as your starting point. If you'd rather use something other than GitHub, simply clone the repository."),(0,i.kt)("p",null,"Once your repository exists, start the application with ",(0,i.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/en/docs/install/"},"Yarn"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"# Install dependencies\nyarn install\n\n# Start development server\nyarn dev\n")),(0,i.kt)("p",null,"Browse to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000"},"http://localhost:3000")," to see your application displaying the Vertex test scene!"),(0,i.kt)("h2",{id:"opening-your-scene"},"Opening your scene"),(0,i.kt)("p",null,"You can open different scenes in your application using the ",(0,i.kt)("strong",{parentName:"p"},"Open Scene")," button. Each scene requires both your Vertex client ID and a stream key."),(0,i.kt)("p",null,"To create a stream key, you'll need your scene ID from the ",(0,i.kt)("a",{parentName:"p",href:"/docs/guides/import-data"},"Import data")," guide. If you have it handy, great! If not, you can list your scenes with the CLI and copy the ID."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"vertex scenes:list --extended\n")),(0,i.kt)("p",null,"Stream keys grant Vertex's Viewer UI component access to your scene. The default stream key expiration is 10 minutes (600 seconds). You can increase this to a maximum of 24 hours (86000 seconds) using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--expiry")," flag."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"vertex stream-keys:create --sceneId [YOUR_SCENE_ID] --expiry 86000\n")),(0,i.kt)("p",null,"Now, in your application, click ",(0,i.kt)("strong",{parentName:"p"},"Open Scene"),", enter your client ID and stream key, and click ",(0,i.kt)("strong",{parentName:"p"},"Open Scene"),". You'll now see your scene instead of the test scene."),(0,i.kt)("h2",{id:"understanding-the-code"},"Understanding the code"),(0,i.kt)("p",null,"Start by opening ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Vertexvis/vertex-nextjs-starter/blob/main/src/components/Home.tsx"},(0,i.kt)("inlineCode",{parentName:"a"},"src/components/Home.tsx")),". We'll walk through the ",(0,i.kt)("inlineCode",{parentName:"p"},"Home")," function in pieces."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"const router = useRouter();\nconst viewer = useViewer();\nconst [credentials, setCredentials] = React.useState<\n  StreamCredentials | undefined\n>();\nconst [dialogOpen, setDialogOpen] = React.useState(false);\nconst [metadata, setMetadata] = React.useState<Metadata | undefined>();\n\n// Prefer credentials in URL to enable easy scene sharing. If empty, use defaults.\nReact.useEffect(() => {\n  if (!router.isReady) return;\n\n  setCredentials({\n    clientId: head(router.query.clientId) || DefaultCredentials.clientId,\n    streamKey: head(router.query.streamKey) || DefaultCredentials.streamKey,\n  });\n}, [router.isReady]);\n\n// On credentials changes, update URL.\nReact.useEffect(() => {\n  if (credentials) router.push(encodeCreds(credentials));\n}, [credentials]);\n\n// Open dialog if 'o' key pressed\nuseHotkeys('o', () => setDialogOpen(true), { keyup: true });\n")),(0,i.kt)("p",null,"At the top, we configure variables we'll need later. We also use ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-effect.html"},"React effect hooks")," to update the URL on credential changes and listen for 'o' key presses to open the ",(0,i.kt)("strong",{parentName:"p"},"Open Scene")," dialog."),(0,i.kt)("p",null,"Now, the fun stuff. We return a ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/jsx-in-depth.html"},(0,i.kt)("inlineCode",{parentName:"a"},"JSX"))," element representing your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"return router.isReady && credentials ? (\n  <Layout\n    header={<Header onOpenSceneClick={() => setDialogOpen(true)} />}\n    main={\n      viewer.isReady && (\n        <Viewer\n          configEnv={vertexEnv}\n          credentials={credentials}\n          onSelect={async (hit?: vertexvis.protobuf.stream.IHit) => {\n            setMetadata(toMetadata({ hit }));\n            await selectByHit({ hit, viewer: viewer.ref.current });\n          }}\n          viewer={viewer.ref}\n        />\n      )\n    }\n    rightDrawer={<RightDrawer files={files} metadata={metadata} />}\n    rightDrawerOpen\n  >\n    {dialogOpen && (\n      <OpenDialog\n        credentials={credentials}\n        onClose={() => setDialogOpen(false)}\n        onConfirm={(cs: StreamCredentials) => {\n          setCredentials(cs);\n          setDialogOpen(false);\n        }}\n        open={dialogOpen}\n      />\n    )}\n  </Layout>\n) : (\n  <></>\n);\n")),(0,i.kt)("p",null,"Let's break this down to see exactly what's happening:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Once the NextJS router is ready and credentials are set, we return the application's components wrapped in a ",(0,i.kt)("inlineCode",{parentName:"li"},"Layout"),". Until then, we return an empty ",(0,i.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/fragments.html"},"React fragment"),"."),(0,i.kt)("li",{parentName:"ul"},"The header includes the ",(0,i.kt)("strong",{parentName:"li"},"Open Scene")," button. With the ",(0,i.kt)("inlineCode",{parentName:"li"},"onOpenSceneClick")," callback, we set the ",(0,i.kt)("inlineCode",{parentName:"li"},"dialogOpen")," state."),(0,i.kt)("li",{parentName:"ul"},"Next is the main application content:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"When the ",(0,i.kt)("inlineCode",{parentName:"li"},"viewer")," is ready, we display the ",(0,i.kt)("inlineCode",{parentName:"li"},"Viewer")," component."),(0,i.kt)("li",{parentName:"ul"},"With the ",(0,i.kt)("inlineCode",{parentName:"li"},"onSelect")," callback, we set the metadata properties state. Then, call a utility function similar to the ",(0,i.kt)("a",{parentName:"li",href:"/docs/guides/render-your-first-scene"},"Render your first scene")," guide's function to perform scene item selection."))),(0,i.kt)("li",{parentName:"ul"},"The right drawer receives files, which we'll discuss more later, and metadata properties for display."),(0,i.kt)("li",{parentName:"ul"},"Finally, the ",(0,i.kt)("strong",{parentName:"li"},"Open Scene")," dialog. It's shown if the ",(0,i.kt)("inlineCode",{parentName:"li"},"dialogOpen")," React state is ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". We pass two callbacks:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onClose")," closes the dialog."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onConfirm")," sets the credentials state, then closes the dialog.")))),(0,i.kt)("h2",{id:"calling-the-vertex-api"},"Calling the Vertex API"),(0,i.kt)("p",null,"Open the ",(0,i.kt)("strong",{parentName:"p"},"Recent Files"),' accordion in the right drawer. You should see "No data". Similarly, browse to ',(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000/api/files"},"http://localhost:3000/api/files")," and you should see a ",(0,i.kt)("inlineCode",{parentName:"p"},"401: Unauthorized")," error. The application doesn't know your Vertex client ID and secret, so it cannot make API calls on your behalf. Let's fix that."),(0,i.kt)("p",null,"In your terminal, type ",(0,i.kt)("inlineCode",{parentName:"p"},"Ctrl+C")," to stop the development server. NextJS has ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/basic-features/environment-variables"},"built-in support for environment variables"),", and the Vertex NextJS Starter comes with a ",(0,i.kt)("inlineCode",{parentName:"p"},".env.local.template")," file you can rename. This makes it easier for you to set them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"mv .env.local.template .env.local\n")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},".env.local")," and set the ",(0,i.kt)("inlineCode",{parentName:"p"},"VERTEX_CLIENT_ID")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"VERTEX_CLIENT_SECRET")," to your Vertex client ID and secret. You can leave ",(0,i.kt)("inlineCode",{parentName:"p"},"VERTEX_ENV")," blank to use the default. Since the environment variables don't start with ",(0,i.kt)("inlineCode",{parentName:"p"},"NEXT_PUBLIC_"),", they are only exposed server-side, keeping your client secret safe."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)(o.a,{mdxType:"ProtectSecretNote"}))),(0,i.kt)("p",null,"Now, start the development server again with ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn dev")," and browse to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000/api/files"},"http://localhost:3000/api/files"),". You should see a list of files you've uploaded! You'll see a simplified list in the ",(0,i.kt)("strong",{parentName:"p"},"Recent Files")," accordion."),(0,i.kt)("p",null,"How does this work? Go ahead and open ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Vertexvis/vertex-nextjs-starter/blob/main/src/pages/api/files.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"src/pages/api/files.ts")),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export default async function getFiles(\n  req: NextApiRequest,\n  res: NextApiResponse<FileList | Failure>\n): Promise<void> {\n  return makeCallAndReturn(res, (client) =>\n    client.files.getFiles({ pageSize: 5 })\n  );\n}\n")),(0,i.kt)("p",null,"This is the function getting called when you browse to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:3000/api/files"},"http://localhost:3000/api/files"),". We're using NextJS ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/api-routes/introduction"},"API Routes")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"makeCall")," helper function. Open ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Vertexvis/vertex-nextjs-starter/blob/main/src/lib/vertex-api.ts"},(0,i.kt)("inlineCode",{parentName:"a"},"src/lib/vertex-api.ts"))," to see what that does."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export async function makeCallAndReturn<T>(\n  res: NextApiResponse<T | Failure>,\n  apiCall: (client: VertexClient) => Promise<AxiosResponse<T>>\n): Promise<void> {\n  const result = await makeCall(apiCall);\n  return isFailure(result)\n    ? res.status(500).json(result)\n    : res.status(200).json(result);\n}\n\nexport async function makeCall<T>(\n  apiCall: (client: VertexClient) => Promise<AxiosResponse<T>>\n): Promise<T | Failure> {\n  try {\n    const c = await getClient();\n    return (await apiCall(c)).data;\n  } catch (error) {\n    console.error('Error calling Vertex API', error.data);\n    return (\n      error.vertexError?.res ?? {\n        errors: [{ status: '500', title: 'Unknown error from Vertex API.' }],\n      }\n    );\n  }\n}\n\nlet Client: VertexClient | undefined;\nasync function getClient(): Promise<VertexClient> {\n  if (Client != null) return Client;\n\n  Client = await VertexClient.build({\n    client: {\n      id: process.env.VERTEX_CLIENT_ID ?? '',\n      secret: process.env.VERTEX_CLIENT_SECRET ?? '',\n    },\n  });\n\n  return Client;\n}\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"makeCall")," calls ",(0,i.kt)("inlineCode",{parentName:"p"},"getClient"),", which creates a Vertex API Client if it doesn't already exist using the environment variables we provided. It then uses the client to call the Vertex API and handles possible errors."),(0,i.kt)("p",null,"Open ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Vertexvis/vertex-nextjs-starter/blob/main/src/pages/index.tsx"},(0,i.kt)("inlineCode",{parentName:"a"},"src/pages/index.tsx"))," once more. At the bottom, we're using ",(0,i.kt)("a",{parentName:"p",href:"https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering"},"NextJS's ",(0,i.kt)("inlineCode",{parentName:"a"},"getServerSideProps"))," function for server-side rendering."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"export async function getServerSideProps(\n  context: GetServerSidePropsContext\n): Promise<GetServerSidePropsResult<Props>> {\n  const empty = { props: { files: [], vertexEnv: Config.vertexEnv } };\n  const host = context.req.headers.host;\n  if (!host) return empty;\n\n  const baseUrl = `http${host.startsWith('localhost') ? '' : 's'}://${host}`;\n  const res = await (await fetch(`${baseUrl}/api/files`)).json();\n  return res == null || res.errors\n    ? empty\n    : { props: { ...empty.props, files: toFileData(res) } };\n}\n")),(0,i.kt)("p",null,"Since ",(0,i.kt)("inlineCode",{parentName:"p"},"fetch")," requires absolute URLs, we get the ",(0,i.kt)("inlineCode",{parentName:"p"},"host")," from the request and construct a ",(0,i.kt)("inlineCode",{parentName:"p"},"baseUrl")," with either ",(0,i.kt)("inlineCode",{parentName:"p"},"http://")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"https://")," depending on if we're running locally or not. Then, we make a request to our ",(0,i.kt)("inlineCode",{parentName:"p"},"/files")," API. We map the response with ",(0,i.kt)("inlineCode",{parentName:"p"},"toFileData")," and the NextJS passes the result as ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/components-and-props.html"},"React props")," into our ",(0,i.kt)("inlineCode",{parentName:"p"},"Home")," component. As we saw above, we pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"files")," prop to the right drawer for display."),(0,i.kt)("h2",{id:"deploying-your-application"},"Deploying your application"),(0,i.kt)("p",null,"Follow one of these guides to deploy your application. If you're not sure which to choose, we recommend Vercel."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://nextjs.org/docs/deployment"},"Vercel"),": From the creators of NextJS, they know best how to deploy their framework. It's as easy as linking your GitHub/GitLab/Bitbucket account, adding environment variables, and visiting your site! On each ",(0,i.kt)("inlineCode",{parentName:"li"},"git push"),", Vercel automatically deploys a new version using ",(0,i.kt)("a",{parentName:"li",href:"https://vercel.com/docs/serverless-functions/introduction"},"Vercel Serverless Functions")," for APIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.netlify.com/blog/2020/11/30/how-to-deploy-next.js-sites-to-netlify/"},"Netlify"),": Similar to Vercel and just as easy. They use ",(0,i.kt)("a",{parentName:"li",href:"https://www.netlify.com/products/functions/"},"Netlify Functions")," for APIs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/serverless-nextjs/serverless-next.js#readme"},"AWS CDK"),": If you already have sites deployed in AWS, this CDK construct helps deploy NextJS, using ",(0,i.kt)("a",{parentName:"li",href:"https://aws.amazon.com/lambda/edge/"},"Lambda@Edge")," for APIs.")),(0,i.kt)("h2",{id:"wrapping-up"},"Wrapping up"),(0,i.kt)("p",null,"Congratulations! To recap the concepts learned so far:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The NextJS framework uses React. It allows us to create client-side and server-side portions of applications, giving you the full power of the Vertex platform."),(0,i.kt)("li",{parentName:"ul"},"Your application uses Vertex UI Components and makes calls to its own API. The UI Components communicate with the Vertex WebSocket using stream keys. Your API uses the Vertex API Client and OAuth tokens to communicate with the Vertex API."),(0,i.kt)("li",{parentName:"ul"},"There are many deployment options to deploy and share applications built with Vertex.")))}h.isMDXComponent=!0},70050:function(e,t,n){t.Z=n.p+"assets/images/vertex-platform-architecture@4x-4737da211532f00c3c3ac2b7bc9ef750.png"}}]);