"use strict";(self.webpackChunkdev_portal=self.webpackChunkdev_portal||[]).push([[4060],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return u}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,h=p["".concat(l,".").concat(u)]||p[u]||m[u]||i;return t?a.createElement(h,o(o({ref:n},d),{},{components:t})):a.createElement(h,o({ref:n},d))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},58215:function(e,n,t){var a=t(67294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},55064:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(67294),r=t(79443);var i=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=t(86010),s="tabItem_1uMI",l="tabItemActive_2DSg";var c=function(e){var n,t=e.lazy,r=e.block,c=e.defaultValue,d=e.values,m=e.groupId,p=e.className,u=a.Children.toArray(e.children),h=null!=d?d:u.map((function(e){return{value:e.props.value,label:e.props.label}})),g=null!=c?c:null==(n=u.find((function(e){return e.props.default})))?void 0:n.props.value,v=i(),f=v.tabGroupChoices,w=v.setTabGroupChoices,x=(0,a.useState)(g),b=x[0],k=x[1],y=[];if(null!=m){var V=f[m];null!=V&&V!==b&&h.some((function(e){return e.value===V}))&&k(V)}var N=function(e){var n=e.currentTarget,t=y.indexOf(n),a=h[t].value;k(a),null!=m&&(w(m,a),setTimeout((function(){var e,t,a,r,i,o,s,c;(e=n.getBoundingClientRect(),t=e.top,a=e.left,r=e.bottom,i=e.right,o=window,s=o.innerHeight,c=o.innerWidth,t>=0&&i<=c&&r<=s&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(l),setTimeout((function(){return n.classList.remove(l)}),2e3))}),150))},C=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=y.indexOf(e.target)+1;t=y[a]||y[0];break;case"ArrowLeft":var r=y.indexOf(e.target)-1;t=y[r]||y[y.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},p)},h.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,className:(0,o.Z)("tabs__item",s,{"tabs__item--active":b===n}),key:n,ref:function(e){return y.push(e)},onKeyDown:C,onFocus:N,onClick:N},null!=t?t:n)}))),t?(0,a.cloneElement)(u.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},u.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==b})}))))}},79443:function(e,n,t){var a=(0,t(67294).createContext)(void 0);n.Z=a},35544:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return m},toc:function(){return p},default:function(){return h}});var a=t(87462),r=t(63366),i=(t(67294),t(3905)),o=t(55064),s=t(58215),l=["components"],c={id:"sdk-xamarin-getting-started",title:"Getting started with Xamarin UI Components"},d=void 0,m={unversionedId:"sdk/sdk-xamarin-getting-started",id:"version-beta/sdk/sdk-xamarin-getting-started",isDocsHomePage:!1,title:"Getting started with Xamarin UI Components",description:"Before you can start using the Vertex Xamarin UI Components, you will need some application credentials and an access token. You should also import data into the platform to use with the viewer.",source:"@site/versioned_docs/version-beta/sdk/sdk-xamarin-getting-started.md",sourceDirName:"sdk",slug:"/sdk/sdk-xamarin-getting-started",permalink:"/docs/beta/sdk/sdk-xamarin-getting-started",editUrl:"https://github.com/Vertexvis/dev-portal/tree/main/versioned_docs/version-beta/sdk/sdk-xamarin-getting-started.md",tags:[],version:"beta",frontMatter:{id:"sdk-xamarin-getting-started",title:"Getting started with Xamarin UI Components"},sidebar:"version-beta/docs",previous:{title:"Xamarin UI Components introduction",permalink:"/docs/beta/sdk/sdk-xamarin"}},p=[{value:"Installation",id:"installation",children:[{value:"NuGet",id:"nuget",children:[]}]},{value:"Loading a model",id:"loading-a-model",children:[{value:"Loading a model (iOS)",id:"loading-a-model-ios",children:[]},{value:"Loading a model (UWP)",id:"loading-a-model-uwp",children:[]}]}],u={toc:p};function h(e){var n=e.components,t=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Before you can start using the Vertex Xamarin UI Components, you will need some application credentials and an access token. You should also import data into the platform to use with the viewer."),(0,i.kt)("p",{parentName:"div"},"For more information, see ",(0,i.kt)("a",{parentName:"p",href:"../guides/authentication"},"Authentication")," and ",(0,i.kt)("a",{parentName:"p",href:"../guides/importing-data"},"Importing Data"),"."))),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("h3",{id:"nuget"},"NuGet"),(0,i.kt)("p",null,"After adding the ",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Vertexvis.Viewer/"},"Vertexvis.Viewer")," package, the Viewer View component will\nbe available from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Vertexvis.Viewer.Common")," namespace. An instance of the Viewer can then be constructed through XAML, with\nproperties set through data binding, or through pure C# using the provided constructors."),(0,i.kt)(o.Z,{defaultValue:"csharp",values:[{label:"C#",value:"csharp"},{label:"XAML",value:"xml"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using Vertexvis.Viewer.Common;\nusing Xamarin.Forms;\n\nnamespace Example\n{\n    public class ExampleViewer : ContentView\n    {\n        public ExampleViewer()\n        {\n            InitializeComponent();\n\n            Content = new Viewer();\n        }\n    }\n}\n"))),(0,i.kt)(s.Z,{value:"xml",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<ContentView\n    xmlns="http://xamarin.com/schemas/2014/forms"\n    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n    xmlns:c="clr-namespace:Vertexvis.Viewer.Common;assembly=Vertexvis.Viewer.Common"\n    x:Class="Example.ExampleViewer">\n    <ContentView.Content>\n        <c:Viewer\n            x:Name="viewer"\n            HorizontalOptions="FillAndExpand"\n            VerticalOptions="FillAndExpand" />\n    </ContentView.Content>\n</ContentView>\n')))),(0,i.kt)("h2",{id:"loading-a-model"},"Loading a model"),(0,i.kt)("p",null,"The first thing you'll want to do when working with the Viewer component is load a model. There are three primary ways\nto reference and load a 3D model from Vertex. Models can be referenced by ",(0,i.kt)("inlineCode",{parentName:"p"},"fileId"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"externalId"),", or by ",(0,i.kt)("inlineCode",{parentName:"p"},"sceneStateId"),".\nThe following example code demonstrates loading with all three types of identifiers."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"If you are using iOS or the Universal Windows Platform, additional setup is required after completing this setup\nto load a model."),(0,i.kt)("p",{parentName:"div"},"For details on how to prepare an iOS project to load a model, see ",(0,i.kt)("a",{parentName:"p",href:"#loading-a-model-ios"},"the iOS steps"),"."),(0,i.kt)("p",{parentName:"div"},"For details on how to prepare a UWP project to load a model, see ",(0,i.kt)("a",{parentName:"p",href:"#loading-a-model-uwp"},"the UWP steps"),"."))),(0,i.kt)(o.Z,{defaultValue:"csharp",values:[{label:"C#",value:"csharp"},{label:"XAML",value:"xml"}],mdxType:"Tabs"},(0,i.kt)(s.Z,{value:"csharp",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Threading.Tasks;\nusing Vertexvis.Viewer.Common;\nusing Vertexvis.Viewer.Common.Scenes;\nusing Vertexvis.Viewer.Common.Types;\nusing Xamarin.Forms;\n\nnamespace Example\n{\n    public class ExampleViewer : ContentView\n    {\n        private Viewer viewer;\n\n        public ExampleViewer()\n        {\n            InitializeComponent();\n\n            viewer = new Viewer\n            {\n                AuthToken = AuthToken.OAuth2("your-generated-token", "your-client-id")\n            };\n\n            Content = viewer;\n\n            Task.Run(() => this.LoadModel());\n        }\n\n        private async Task LoadModel()\n        {\n            SceneBuilder sceneBuilder = await viewer.newScene();\n\n            // Loads a model by a specified externalId. An external ID can be\n            // assigned by you when uploading a file through our API.\n            string scene = await sceneBuilder\n              .From(Resource.FileByExternalId("your-external-id"))\n              .Execute();\n\n            // Loads a model by a Vertex fileId. You can retrieve the ID from the\n            // Vertex app by navigating into an uploaded model and copying the ID\n            // from the URL, e.g.\n            // https://app.vertexvis.com/file/2c2410ee-6ab9-45ee-a80b-255f2e20160e\n            scene = await sceneBuilder\n              .From(Resource.File("your-file-id"))\n              .Execute();\n\n            // Loads a model by a sceneStateId. This approach can be used to load\n            // a snapshot. The easiest way at the moment to get a snapshot\'s\n            // scene state ID is by using the browser\'s dev tools to inspect the\n            // network response for the  `GET /model_snapshot_versions` API call.\n            scene = await sceneBuilder\n              .From(Resource.SceneState("your-scene-state-id"))\n              .Execute();\n\n            await viewer.Load(scene);\n        }\n    }\n}\n'))),(0,i.kt)(s.Z,{value:"xml",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<ContentView\n    xmlns="http://xamarin.com/schemas/2014/forms"\n    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"\n    xmlns:c="clr-namespace:Vertexvis.Viewer.Common;assembly=Vertexvis.Viewer.Common"\n    x:Class="Example.ExampleViewer">\n    <ContentView.Content>\n        <c:Viewer\n            x:Name="viewer"\n            AuthToken={Binding AuthToken}\n            HorizontalOptions="FillAndExpand"\n            VerticalOptions="FillAndExpand" />\n    </ContentView.Content>\n</ContentView>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'// C# code-behind\n\nusing System.Threading.Tasks;\nusing Vertexvis.Viewer.Common.Scenes;\nusing Vertexvis.Viewer.Common.Types;\nusing Xamarin.Forms;\n\nnamespace Example\n{\n    public partial class ExampleViewer : ContentView\n    {\n        public Resource Resource { get; set; }\n        public AuthToken AuthToken { get; set; }\n\n        public ExampleViewer()\n        {\n            InitializeComponent();\n\n            AuthToken = AuthToken.Oauth2("your-token", "your-client-id");\n\n            Task.Run(() => this.LoadModel());\n        }\n\n        private async Task LoadModel()\n        {\n            SceneBuilder sceneBuilder = await viewer.newScene();\n\n            // Loads a model by a specified externalId. An external ID can be\n            // assigned by you when uploading a file through our API.\n            string scene = await sceneBuilder\n              .From(Resource.FileByExternalId("your-external-id"))\n              .Execute();\n\n            // Loads a model by a Vertex fileId. You can retrieve the ID from the\n            // Vertex app by navigating into an uploaded model and copying the ID\n            // from the URL, e.g.\n            // https://app.vertexvis.com/file/2c2410ee-6ab9-45ee-a80b-255f2e20160e\n            scene = await sceneBuilder\n              .From(Resource.File("your-file-id"))\n              .Execute();\n\n            // Loads a model by a sceneStateId. This approach can be used to load\n            // a snapshot. The easiest way at the moment to get a snapshot\'s\n            // scene state ID is by using the browser\'s dev tools to inspect the\n            // network response for the  `GET /model_snapshot_versions` API call.\n            scene = await sceneBuilder\n              .From(Resource.SceneState("your-scene-state-id"))\n              .Execute();\n\n            await viewer.Load(scene);\n        }\n    }\n}\n')))),(0,i.kt)("h3",{id:"loading-a-model-ios"},"Loading a model (iOS)"),(0,i.kt)("p",null,"To load a model in an iOS application, you must also include\nsome of our WebView navigation handling. To do this, extend the ",(0,i.kt)("inlineCode",{parentName:"p"},"HybridWebViewNavigationDelegate"),"\nclass provided in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Vertexvis.Viewer.iOS")," namespace, as shown below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using System;\nusing Vertexvis.Viewer.iOS;\n\nnamespace Example.iOS\n{\n    public class HybridWebViewNavigationDelegateProxy : HybridWebViewNavigationDelegate\n    {\n        public HybridWebViewNavigationDelegateProxy(Action onPageLoad)\n            : base(onPageLoad) { }\n    }\n}\n")),(0,i.kt)("h3",{id:"loading-a-model-uwp"},"Loading a model (UWP)"),(0,i.kt)("p",null,"To load a model in a UWP application, a supplementary ",(0,i.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Vertexvis.Viewer.Uwp/"},"Vertexvis.Viewer.Uwp"),"\nNuGet package is required. This package should be added to the UWP project for the application, and the\nVertexvis.Viewer package should still be present in the common project."))}h.isMDXComponent=!0},86010:function(e,n,t){function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}t.d(n,{Z:function(){return r}})}}]);